## CSE 331 hw-graph Part 1 Questions

## Part 1
###########################################################################

a. Write an AF and RI for IntQueue1 and IntQueue2.

    ### IntQueue1

    Abstraction Function:
    AF(this): Queue<Integer> q such that
              q = entries = [] if entries is empty
              q = entries = [e0, e1, ... , e(i-1)] where i = size and e0 is the first element


    Representation Invariant:
    entries != null && entries[i] != null where 0 <= i < entries.size()




    ### IntQueue2

    Abstraction Function:
    AF(this): Queue<Integer> q such that
              entries = [e0, e1, ... , e(i-1)] where i = number of elements in entries
              front = k (index of first element in entries), size = n
              q = entries = [] if size = 0
              q = [e(k), ... , e(k+n-1)] if (front + size) <= entries.length
              q = [e(k), ... , e(i-1), e0, ..., e(n-(i-k)-1)] if (front + size) > entries.length


    Representation Invariant:
    entries != null & 0 <= front <= entries.length - 1 & size >= 0



b. Group the snapshots of IntQueue2's internal state into groups that have the same abstract state.
   Group 1: q(a) = [1,2], q(d) = [1,2], q(g) = [1,2]
   Group 2: q(b) = [2,3,4], q(h) = [2,3,4]
   Group 3: q(c) = [1,2,3], q(f) = [1,2,3]
   Group 4: q(e) = [1,2,3,4]



c. For each signature below, state and justify in 1-2 sentences (per part) whether the method or constructor
could possibly expose the representation, given the information available. Explain any assumptions you made.

    1. `public int solveEquations(int x, int y, int z)`
        There is no representation exposure here since the method returns a new integer
        representing the solved equation given x, y, z. The client cannot modify or interact
        with x, y, and z in anyway.


    2. `public String[] decode(boolean slowly)`
        Since an array is a mutable type, it is possible rep exposure could occur if the String
        array that is returned is a reference to a private field within the class. If a new array
        is returned, then representation exposure does not occur.


    3. `private Date myBirthday()`
        Assuming that Date is mutable, it is possible rep exposure could occur if the Data object
        that is returned is a reference to 'this' Date object in the class. If a new Date object
        is returned, then representation exposure does not occur.


    4. `public String toString()`
        Since String is an immutable type, there is no representation exposure.


    5. `public Iterator<Integer> elements()`
        This method contains representation exposure if the Iterator returned
        is a reference to a mutable collection.


    6. `public Deck(List<Card> cards)`
        This method can have representation exposure if a copy of
        'cards' is not created to construct Deck. If the list of cards
        is not copied, the client can mutate cards within the list since
        List is a mutable data type.



## Part 2
###########################################################################

Briefly explain why you included the operations you did and why you feel they are a sufficient
interface to a graph. If your design includes multiple classes or interfaces, explain why you
included each one; if not, explain whether you considered additional classes and why you decided
not to include them.

My implementation of a directed, labeled graph was split into three classes: a Node class, an Edge
class, and a DLGraph class. My Node class simply holds a piece of data in the form of a String
while my Edge class holds the label name of the edge and the child node the edge is pointing to.
My DlGraph class will be implemented through a HashMap with the keys being the nodes (parent) and
the value being a HashSet of edges for that given node. In my DLGraph class, aside from the basic
mutator methods such as adding a node, adding an edge, removing a node, removing an edge, and
clearing the graph, this class contains various observer methods that I included so that I can use
them to create my mutator methods as well as for general information the client might want to know
about the graph. I feel like these three classes and my methods are sufficient for the interface to
a graph since a client will be able to perform all the basic mutators that define the functions of
a graph and will allow for accessibility of certain information that may be of use to the client.


## Part 3
###########################################################################

What was your testing strategy for this assignment? How do your script tests and JUnit tests
differ from each other (if they do), and why?
My testing strategy for this assignment was to write my script tests first to test the overall
functionality of the graph while the JUnit tests are tests more specific to certain methods.
I began by listing out what functions the graph should have such as creating an empty graph,
creating a graph with one node and one edge pointing back to that node, creating a graph
with multiple nodes and multiple edges coming from the same parent node, having multiple
edges for the same parent node to child node, and others as well. After I determined this, I
was able to write my script tests to test purely functionality. My JUnit tests are more specific
in testing the functionality of individual methods such as testing my isEmpty() method in my
DLGraph class both if the graph being tested is empty and is not empty. My JUnit tests are more
focused on testing edge cases and values that could cause my code to malfunction or highlight a bug
while script tests make sure the graph as a whole properly functions.


